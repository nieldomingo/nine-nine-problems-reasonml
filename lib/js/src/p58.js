// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");

function child_counts(n) {
  if (n % 2) {
    return /* tuple */[
            (n / 2 | 0) + 1 | 0,
            n / 2 | 0
          ];
  } else {
    return /* tuple */[
            n / 2 | 0,
            n / 2 | 0
          ];
  }
}

function cbal_tree(n) {
  if (n) {
    var match = child_counts(n - 1 | 0);
    var cnt2 = match[1];
    var cnt1 = match[0];
    if (cnt1 === cnt2) {
      return sub_trees(cnt1, cnt1);
    } else {
      return List.append(sub_trees(cnt1, cnt2), sub_trees(cnt2, cnt1));
    }
  } else {
    return /* :: */[
            /* Empty */0,
            /* [] */0
          ];
  }
}

function sub_trees(cnt1, cnt2) {
  return List.concat(List.map((function (left) {
                    return List.map((function (right) {
                                  return /* Node */[
                                          "x",
                                          left,
                                          right
                                        ];
                                }), cbal_tree(cnt2));
                  }), cbal_tree(cnt1)));
}

function is_mirror(_left, _right) {
  while(true) {
    var right = _right;
    var left = _left;
    if (left) {
      if (right) {
        if (is_mirror(left[1], right[2])) {
          _right = right[1];
          _left = left[2];
          continue ;
          
        } else {
          return /* false */0;
        }
      } else {
        return /* false */0;
      }
    } else if (right) {
      return /* false */0;
    } else {
      return /* true */1;
    }
  };
}

function is_symmetric(t) {
  if (t) {
    return is_mirror(t[1], t[2]);
  } else {
    return /* true */1;
  }
}

function sym_cbal_trees(n) {
  return List.filter(is_symmetric)(cbal_tree(n));
}

console.log(List.filter(is_symmetric)(cbal_tree(5)));

exports.child_counts   = child_counts;
exports.cbal_tree      = cbal_tree;
exports.sub_trees      = sub_trees;
exports.is_mirror      = is_mirror;
exports.is_symmetric   = is_symmetric;
exports.sym_cbal_trees = sym_cbal_trees;
/*  Not a pure module */
