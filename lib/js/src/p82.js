// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var List                          = require("bs-platform/lib/js/list.js");
var $$Array                       = require("bs-platform/lib/js/array.js");
var Caml_obj                      = require("bs-platform/lib/js/caml_obj.js");
var Graph_term$NinetyNineProblems = require("./graph_term.js");

function cycles(g, start) {
  var valid_edge = function (s, u, v, path) {
    if (Caml_obj.caml_equal(u, s)) {
      if (List.mem(v, path)) {
        return Caml_obj.caml_equal(v, start);
      } else {
        return /* true */1;
      }
    } else {
      return /* false */0;
    }
  };
  var neighbors = function (s, path) {
    return List.map((function (edge) {
                  var u = edge[0];
                  var match = Caml_obj.caml_equal(u, s);
                  if (match !== 0) {
                    return edge[1];
                  } else {
                    return u;
                  }
                }), List.filter((function (edge) {
                        var v = edge[1];
                        var u = edge[0];
                        if (valid_edge(s, u, v, path)) {
                          return /* true */1;
                        } else {
                          return valid_edge(s, v, u, path);
                        }
                      }))(g[/* edges */1]));
  };
  var traverse = function (s, path, all_paths) {
    var new_path = /* :: */[
      s,
      path
    ];
    if (Caml_obj.caml_equal(s, start) && List.length(path) !== 0) {
      return /* :: */[
              List.rev(new_path),
              all_paths
            ];
    } else {
      return List.fold_left((function (acc, neighbor) {
                    return traverse(neighbor, new_path, acc);
                  }), all_paths, neighbors(s, new_path));
    }
  };
  return traverse(start, /* [] */0, /* [] */0);
}

console.log($$Array.of_list(List.map($$Array.of_list, cycles(Graph_term$NinetyNineProblems.example_graph, /* "f" */102))));

var example_graph = Graph_term$NinetyNineProblems.example_graph;

exports.example_graph = example_graph;
exports.cycles        = cycles;
/*  Not a pure module */
