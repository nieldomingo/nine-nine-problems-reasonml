// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';


function layout_binary_tree_1(tree) {
  var aux = function (tree, index, level) {
    if (tree) {
      var match = aux(tree[1], index, level + 1 | 0);
      var left_current_index = match[0];
      var match$1 = aux(tree[2], left_current_index + 1 | 0, level + 1 | 0);
      return /* tuple */[
              match$1[0],
              /* Node */[
                /* tuple */[
                  tree[0],
                  left_current_index + 1 | 0,
                  level
                ],
                match[1],
                match$1[1]
              ]
            ];
    } else {
      return /* tuple */[
              index,
              /* Empty */0
            ];
    }
  };
  return aux(tree, 0, 1)[1];
}

var example_layout_tree_001 = /* Node */[
  "k",
  /* Node */[
    "c",
    /* Node */[
      "a",
      /* Empty */0,
      /* Empty */0
    ],
    /* Node */[
      "h",
      /* Node */[
        "g",
        /* Node */[
          "e",
          /* Empty */0,
          /* Empty */0
        ],
        /* Empty */0
      ],
      /* Empty */0
    ]
  ],
  /* Node */[
    "m",
    /* Empty */0,
    /* Empty */0
  ]
];

var example_layout_tree_002 = /* Node */[
  "u",
  /* Node */[
    "p",
    /* Empty */0,
    /* Node */[
      "s",
      /* Node */[
        "q",
        /* Empty */0,
        /* Empty */0
      ],
      /* Empty */0
    ]
  ],
  /* Empty */0
];

var example_layout_tree = /* Node */[
  "n",
  example_layout_tree_001,
  example_layout_tree_002
];

console.log(layout_binary_tree_1(example_layout_tree));

exports.layout_binary_tree_1 = layout_binary_tree_1;
/*  Not a pure module */
