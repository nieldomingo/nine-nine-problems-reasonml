// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var List     = require("bs-platform/lib/js/list.js");
var Block    = require("bs-platform/lib/js/block.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");

function encode(l) {
  var elem = function (e, cnt) {
    if (cnt !== 0) {
      return /* Many */Block.__(1, [/* tuple */[
                  cnt + 1 | 0,
                  e
                ]]);
    } else {
      return /* One */Block.__(0, [e]);
    }
  };
  var aux = function (_l, _acc, _cnt) {
    while(true) {
      var cnt = _cnt;
      var acc = _acc;
      var l = _l;
      if (l) {
        var match = l[1];
        var a = l[0];
        if (match) {
          var rest = match[1];
          var b = match[0];
          if (Caml_obj.caml_equal(a, b)) {
            _cnt = cnt + 1 | 0;
            _l = /* :: */[
              b,
              rest
            ];
            continue ;
            
          } else {
            _cnt = 0;
            _acc = /* :: */[
              elem(a, cnt),
              acc
            ];
            _l = /* :: */[
              b,
              rest
            ];
            continue ;
            
          }
        } else {
          return /* :: */[
                  elem(a, cnt),
                  acc
                ];
        }
      } else {
        return /* [] */0;
      }
    };
  };
  return List.rev(aux(l, /* [] */0, 0));
}

console.log(encode(/* :: */[
          "a",
          /* :: */[
            "a",
            /* :: */[
              "a",
              /* :: */[
                "a",
                /* :: */[
                  "b",
                  /* :: */[
                    "c",
                    /* :: */[
                      "c",
                      /* :: */[
                        "a",
                        /* :: */[
                          "a",
                          /* :: */[
                            "d",
                            /* :: */[
                              "e",
                              /* :: */[
                                "e",
                                /* :: */[
                                  "e",
                                  /* :: */[
                                    "e",
                                    /* [] */0
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]));

exports.encode = encode;
/*  Not a pure module */
